"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

{
    terraform = {
        curl = {
            script = r"""#!/usr/bin/env bash

strip_html() {
    sed -e 's/<[^>]*>//g'
}

filter_released() {
    grep -oE 'terraform_[\.[:alnum:]]*$'
}

filter_version() {
    sed -e 's#terraform_##'
}

version=$(
    curl https://releases.hashicorp.com/terraform/ |
        grep -viE 'alpha|beta' |
        strip_html |
        filter_released |
        sort --general-numeric-sort |
        tail -1 |
        filter_version
)
echo $version
mkdir -p /usr/local/src/
curl -sSL -o /usr/local/src/terraform_${version}_linux_amd64.zip https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip
unzip -o -d /usr/local/src/terraform_${version}_linux_amd64 /usr/local/src/terraform_${version}_linux_amd64.zip
ln -fs /usr/local/src/terraform_${version}_linux_amd64/terraform /usr/local/bin/terraform

terraform version >/dev/null


"""
        }
    }
    cakepalm = {
        curl = {
            script = r"""apt-get -y install wget

url=https://github.com/taylormonacelli/cakepalm/releases/latest/download/cakepalm_Linux_x86_64.tar.gz
curl -fsSL $url | tar -C /usr/local/bin --no-same-owner -xz cakepalm

cat >/usr/lib/systemd/system/cakepalm.service <<'EOF'
[Unit]
Description=Cakepalm service

# After networking because we need that
After=network.target

[Service]
Type=simple
User=root
Group=root

# Any setup we need to do, specifying the shell because otherwise who knows what's up
ExecStartPre=/bin/bash -c 'echo "hello world"'

# Set the working directory for the application
WorkingDirectory=/tmp

# Command to run the application
ExecStart=/usr/local/bin/cakepalm

# Restart policy, only on failure
Restart=on-failure

[Install]
# Start the service before we get to multi-user mode
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable cakepalm
systemctl restart cakepalm
systemctl is-active cakepalm
systemctl status cakepalm


"""
        }
    }
    unzip = {
        curl = {
            script = r"""#!/usr/bin/env bash

if command -v apt-get &>/dev/null; then
    apt-get install -y unzip
elif command -v dnf &>/dev/null; then
    dnf install -y unzip
elif command -v yum &>/dev/null; then
    yum install -y unzip
elif command -v zypper &>/dev/null; then
    zypper install -y unzip
elif command -v apk &>/dev/null; then
    apk add --no-cache unzip
elif command -v pacman &>/dev/null; then
    pacman -Sy --noconfirm unzip
else
    echo "Unsupported package manager. Please install unzip manually."
    exit 1
fi

unzip -v


"""
        }
    }
    rye = {
        curl = {
            script = r"""#!/usr/bin/env bash

RYE_HOME="$HOME/.rye"
mkdir -p "$RYE_HOME"
curl -sSf https://rye-up.com/get | RYE_INSTALL_OPTION="--yes" RYE_HOME="$RYE_HOME" bash

if [[ ":$PATH:" != *":$RYE_HOME/shims:"* ]]; then
    echo 'export PATH="$RYE_HOME/shims:$PATH"' >>"$HOME/.bashrc"
fi

source "$RYE_HOME/env"
rye --version


"""
        }
    }
    logstash = {
        curl = {
            script = r"""#!/usr/bin/env bash

set -e
set -x
set -u

export DEBIAN_FRONTEND=noninteractive
export NEEDRESTART_MODE=a
export NEEDRESTART_SUSPEND=1

# workround
if [[ ! -f /tmp/logstash-8.13.0-amd64.deb ]]; then
    curl -L -o /tmp/logstash-8.13.0-amd64.deb https://artifacts.elastic.co/downloads/logstash/logstash-8.13.0-amd64.deb
fi

dpkg -i /tmp/logstash-8.13.0-amd64.deb

ln --force --symbolic /usr/share/logstash/bin/logstash /usr/local/bin/logstash

logstash --version

rm -f /tmp/logstash-8.13.0-amd64.deb

exit 0

# https://www.elastic.co/guide/en/logstash/8.12/installing-logstash.html#_apt

export DEBIAN_FRONTEND=noninteractive
export NEEDRESTART_MODE=a
export NEEDRESTART_SUSPEND=1

apt-get update

apt-get --fix-missing --assume-yes install logstash
ln --force --symbolic /usr/share/logstash/bin/logstash /usr/local/bin/logstash

logstash --version


"""
        }
    }
    kubectl = {
        curl = {
            script = r"""#!/usr/bin/env bash

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
rm -f kubectl
kubectl version --output=yaml --client | awk '/gitVersion/{print $2;}'

if ! grep --quiet 'alias k=kubectl' ~/.profile; then
    echo alias k=kubectl >>~/.profile
fi

"""
        }
    }
    fogcrow = {
        homebrew = {
            script = r"""sudo --user linuxbrew --login brew install taylormonacelli/tools/fogcrow

"""
        }
        curl = {
            script = r"""#!/usr/bin/env bash

url=https://github.com/taylormonacelli/fogcrow/releases/latest/download/fogcrow_Linux_x86_64.tar.gz
checksums_url=https://github.com/taylormonacelli/fogcrow/releases/latest/download/checksums.txt
tmp=$(mktemp -d /tmp/fogcrow-XXXX)
orig="$(pwd)"

cd $tmp
curl --fail --silent --show-error --location --output fogcrow_Linux_x86_64.tar.gz $url
curl --fail --silent --show-error --location --output checksums.txt $checksums_url

if ! sha256sum --check checksums.txt --ignore-missing; then
    echo "Checksum validation failed"
    exit 1
fi

tar --extract --gzip --file fogcrow_Linux_x86_64.tar.gz fogcrow
install --mode 0755 fogcrow /usr/local/bin/fogcrow

cd $orig
rm -rf $tmp
fogcrow --help





"""
        }
    }
    cloudelf = {
        homebrew = {
            script = r"""sudo --user linuxbrew --login HOMEBREW_NO_INSTALL_UPGRADE=1 brew install taylormonacelli/homebrew-tools/cloudelf
"""
        }
        curl = {
            script = r"""url=https://github.com/taylormonacelli/cloudelf/releases/latest/download/cloudelf_Linux_x86_64.tar.gz
curl -fsSL $url | tar -C /usr/local/bin --no-same-owner -xz cloudelf

"""
        }
    }
    packer = {
        curl = {
            script = r"""# https://developer.hashicorp.com/packer/install
# https://releases.hashicorp.com/packer/

cd /tmp

url=https://releases.hashicorp.com/packer/
ver=$(curl -s $url | grep -v alpha | grep -oE 'packer_[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n1 | cut -d'_' -f2)
dl_url="${url}${ver}/packer_${ver}_linux_amd64.zip"

echo "Downloading Packer ${ver}..."
curl -sL $dl_url -o packer.zip

echo "Unpacking Packer..."
unzip -q packer.zip

echo "Installing Packer to /usr/local/bin/packer..."
install --mode 0755 --group root --owner root packer /usr/local/bin/packer

echo "Cleaning up..."
rm packer.zip
rm -f /tmp/packer

packer --version


"""
        }
    }
    awscli = {
        curl = {
            notes = r"""This installs awscli v2 gleaned from https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
"""
            script = r"""orig_dir=$(pwd)
tmp=$(mktemp -d awscli-XXXX)
cd $tmp
curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
unzip awscliv2.zip
sudo ./aws/install
cd $orig_dir

aws --version

rm -rf $tmp
"""
        }
        "apt-get" = {
            notes = r"""This installs aws cli v1 and I don't see deb package for v2.

Use curl install instead.
"""
            script = r"""sudo apt-get update
sudo apt-get --assume-yes upgrade

if command -v apt-get &>/dev/null; then
    for i in {1..5}; do
        DEBIAN_FRONTEND=noninteractive apt-get -y install awscli && break
        sleep 1
    done

    dpkg -s awscli &>/dev/null
elif command -v yum &>/dev/null; then
    for i in {1..5}; do
        yum -y install awscli && break
        sleep 1
    done
else
    echo "Neither apt nor yum package manager is available."
fi
"""
        }
    }
    sops = {
        curl = {
            script = r"""#!/usr/bin/env bash

# https://github.com/getsops/sops/releases

orig_dir=$(pwd)
tmp=$(mktemp -d ./sops-XXXX)
cd $tmp

allbranding query --releases-url=https://api.github.com/repos/getsops/sops/releases --asset-regex='sops.*.linux.amd64' >manifest.json
url=$(cat manifest.json | jq -r .browser_download_url)
version=$(cat manifest.json | jq -r .version)
checksums_url=https://github.com/getsops/sops/releases/download/$version/sops-$version.checksums.txt

curl --fail --silent --show-error --location --output sops-$version.linux.amd64 $url
curl --fail --silent --show-error --location --output checksums.txt $checksums_url

if ! sha256sum --check checksums.txt --ignore-missing; then
    echo "Checksum validation failed"
    exit 1
fi

install --mode 0755 --group root --owner root sops-$version.linux.amd64 /usr/local/bin/sops

sops --version

cd $orig_dir
rm -rf $tmp
"""
        }
    }
    terragrunt = {
        brew = {
            script = r"""sudo --user linuxbrew --login brew install terragrunt
"""
        }
        curl = {
            notes = r"""https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
"""
            script = r"""curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
"""
        }
    }
    helm = {
        curl = {
            script = r"""#!/bin/bash

ARCH=linux-amd64

version=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | jq -r .tag_name)

curl https://raw.githubusercontent.com/helm/helm/main/KEYS | gpg --import
curl -sSLO https://github.com/helm/helm/releases/download/${version}/helm-${version}-${ARCH}.tar.gz.asc
curl -sSLO https://get.helm.sh/helm-${version}-${ARCH}.tar.gz

gpg --verify helm-${version}-${ARCH}.tar.gz.asc helm-${version}-${ARCH}.tar.gz

if [ $? -ne 0 ]; then
    echo "Signature verification failed. The release archive may be corrupted or tampered with."
    exit 1
fi

echo "Signature verification succeeded. The release archive is authentic."

base=helm-${version}-${ARCH}
targz=$base.tar.gz
mkdir -p /tmp/$base
tar xzf /tmp/$targz --strip-components=1 -C /tmp/$base
install --mode 755 /tmp/$base/helm /usr/local/bin/helm
helm version
helm repo add stable https://charts.helm.sh/stable
helm search repo stable
rm -rf /tmp/$base
rm -rf /tmp/$targz
"""
        }
    }
    kcl = {
        curl = {
            script = r"""curl -fsSL https://kcl-lang.io/script/install-cli.sh | /bin/bash
"""
        }
        homebrew = {
            script = r"""brew install kcl-lang/tap/kcl@0.8.0
"""
        }
        scoop = {
            script = r"""scoop bucket add kcl-lang https://github.com/kcl-lang/scoop-bucket.git
scoop install kcl-lang/kcl
"""
        }
        go = {
            script = r"""go install kcl-lang.io/cli/cmd/kcl@latest

"""
        }
        docker = {
            script = r"""docker run --rm -it kcllang/kcl

"""
        }
        powershell = {
            script = r"""powershell -Command "iwr -useb https://kcl-lang.io/script/install-cli.ps1 | iex"

"""
        }
    }
    "kcl-lsp" = {
        curl = {
            script = r"""curl -fsSL https://kcl-lang.io/script/install-kcl-lsp.sh | /bin/bash
"""
        }
        powershell = {
            script = r"""powershell -Command "iwr -useb https://kcl-lang.io/script/install-kcl-lsp.ps1 | iex"
"""
        }
        homebrew = {
            script = r"""brew install kcl-lang/tap/kcl-lsp@0.7.0
"""
        }
        scoop = {
            script = r"""scoop bucket add kcl-lang https://github.com/kcl-lang/scoop-bucket.git
scoop install kcl-lang/kcl-lsp

"""
        }
    }
    gpg = {
        "apt-get" = {
            script = r"""sudo apt-get install -y gnupg
"""
        }
        dnf = {
            script = r"""sudo dnf install -y gnupg
"""
        }
        yum = {
            script = r"""sudo yum install -y gnupg
"""
        }
        pacman = {
            script = r"""sudo pacman -Sy --noconfirm gnupg
"""
        }
        zypper = {
            script = r"""sudo zypper install -y gnupg
"""
        }
        homebrew = {
            script = r"""brew install gnupg
"""
        }
        pkg = {
            freebsd = {
                script = r"""sudo pkg install -y gnupg
"""
            }
            openbsd = {
                script = r"""sudo pkg_add gnupg
"""
            }
        }
    }
}
