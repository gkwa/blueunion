gpg:
  curl:
    script: |
      #!/bin/bash

      OS=$(uname -s)

      # Install GPG based on the operating system
      if [[ $OS == "Linux" ]]; then
          # Determine the Linux distribution
          if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get install -y gnupg
          elif command -v dnf >/dev/null 2>&1; then
              sudo dnf install -y gnupg
          elif command -v yum >/dev/null 2>&1; then
              sudo yum install -y gnupg
          elif command -v pacman >/dev/null 2>&1; then
              sudo pacman -Sy --noconfirm gnupg
          elif command -v zypper >/dev/null 2>&1; then
              sudo zypper install -y gnupg
          else
              echo "Unsupported Linux distribution. Please install GPG manually."
              exit 1
          fi
      elif [[ $OS == "Darwin" ]]; then
          # macOS
          if command -v brew >/dev/null 2>&1; then
              # Install using Homebrew
              brew install gnupg
          else
              echo "Homebrew not found. Please install Homebrew and then run this script again."
              exit 1
          fi
      elif [[ $OS == "FreeBSD" ]]; then
          # FreeBSD
          sudo pkg install -y gnupg
      elif [[ $OS == "OpenBSD" ]]; then
          # OpenBSD
          sudo pkg_add gnupg
      else
          echo "Unsupported operating system. Please install GPG manually."
          exit 1
      fi

      echo "GPG installation completed."


goreleaser:
  curl:
    script: |
      #!/usr/bin/env bash

      # https://goreleaser.com/install/#apt

      if command -v yum &>/dev/null; then
          echo '[goreleaser]
      name=GoReleaser
      baseurl=https://repo.goreleaser.com/yum/
      enabled=1
      gpgcheck=0' | sudo tee /etc/yum.repos.d/goreleaser.repo
          sudo yum install -y goreleaser
      elif command -v apt-get &>/dev/null; then
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt-get update
          sudo apt-get install --assume-yes goreleaser
      else
          echo "Neither yum nor apt package manager found"
          exit 1
      fi


krew:
  curl:
    script: |
      #!/usr/bin/env bash

      # https://krew.sigs.k8s.io/docs/user-guide/setup/install/

      (
          set -x
          cd "$(mktemp -d)" &&
              OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
              ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
              KREW="krew-${OS}_${ARCH}" &&
              curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
              tar zxvf "${KREW}.tar.gz" &&
              ./"${KREW}" install krew
      )

      mkdir -p $HOME/.krew/bin
      export PATH=$HOME/.krew/bin:$PATH
      echo 'export PATH=$HOME/.krew/bin:$PATH' >>~/.profile

      set +u
      echo $KREW_ROOT
      export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
      set -u

      kubectl krew version


eachit:
  curl:
    script: |
      #!/usr/bin/env bash

      url=https://github.com/taylormonacelli/eachit/releases/latest/download/eachit_Linux_x86_64.tar.gz
      checksums_url=https://github.com/taylormonacelli/eachit/releases/latest/download/checksums.txt

      tmp=$(mktemp -d /tmp/eachit-XXXX)
      orig="$(pwd)"
      cd $tmp

      curl --fail --silent --show-error --location --output eachit_Linux_x86_64.tar.gz $url
      curl --fail --silent --show-error --location --output checksums.txt $checksums_url

      if ! sha256sum --check checksums.txt --ignore-missing; then
          echo "Checksum validation failed"
          exit 1
      fi

      tar --extract --gzip --file eachit_Linux_x86_64.tar.gz eachit
      install --mode 0755 eachit /usr/local/bin/eachit

      cd $orig
      rm -rf $tmp

      eachit --help


tilt:
  curl:
    script: |
      #!/usr/bin/env bash

      curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash

cilium:
  curl:
    script: |
      #!/usr/bin/env bash

      # puts /usr/local/bin/cilium

      CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/master/stable.txt)
      CLI_ARCH=amd64
      if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
      curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
      sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
      tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
      rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

      cilium help

timoni:
  curl:
    script: |
      #!/usr/bin/env bash

      arkade get timoni
      mv /root/.arkade/bin/timoni /usr/local/bin/

arkadade:
  curl:
    script: |
      #!/usr/bin/env bash

      curl -sLS https://get.arkade.dev | sudo sh

kustomize:
  curl:
    script: |
      #!/usr/bin/env bash

      pushd /usr/local/bin
      curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
      popd

terraform:
  apt-get:
    script |
      #!/usr/bin/env bash

      export DEBIAN_FRONTEND=noninteractive

      curl -L https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor --batch --yes -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
      sudo apt-get update

      apt-get --assume-yes install terraform

  curl:
    script: |
      #!/usr/bin/env bash

      strip_html() {
          sed -e 's/<[^>]*>//g'
      }

      filter_released() {
          grep -oE 'terraform_[\.[:alnum:]]*$'
      }

      filter_version() {
          sed -e 's#terraform_##'
      }

      version=$(
          curl https://releases.hashicorp.com/terraform/ |
              grep -viE 'alpha|beta' |
              strip_html |
              filter_released |
              sort --general-numeric-sort |
              tail -1 |
              filter_version
      )
      echo $version
      mkdir -p /usr/local/src/
      curl -sSL -o /usr/local/src/terraform_${version}_linux_amd64.zip https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip
      unzip -o -d /usr/local/src/terraform_${version}_linux_amd64 /usr/local/src/terraform_${version}_linux_amd64.zip
      ln -fs /usr/local/src/terraform_${version}_linux_amd64/terraform /usr/local/bin/terraform

      terraform version >/dev/null


cakepalm:
  curl:
    script: |
      apt-get -y install wget

      url=https://github.com/taylormonacelli/cakepalm/releases/latest/download/cakepalm_Linux_x86_64.tar.gz
      curl -fsSL $url | tar -C /usr/local/bin --no-same-owner -xz cakepalm

      cat >/usr/lib/systemd/system/cakepalm.service <<'EOF'
      [Unit]
      Description=Cakepalm service

      # After networking because we need that
      After=network.target

      [Service]
      Type=simple
      User=root
      Group=root

      # Any setup we need to do, specifying the shell because otherwise who knows what's up
      ExecStartPre=/bin/bash -c 'echo "hello world"'

      # Set the working directory for the application
      WorkingDirectory=/tmp

      # Command to run the application
      ExecStart=/usr/local/bin/cakepalm

      # Restart policy, only on failure
      Restart=on-failure

      [Install]
      # Start the service before we get to multi-user mode
      WantedBy=multi-user.target
      EOF

      systemctl daemon-reload
      systemctl enable cakepalm
      systemctl restart cakepalm
      systemctl is-active cakepalm
      systemctl status cakepalm


unzip:
  curl:
    script: |
      #!/usr/bin/env bash

      if command -v apt-get &>/dev/null; then
          apt-get install -y unzip
      elif command -v dnf &>/dev/null; then
          dnf install -y unzip
      elif command -v yum &>/dev/null; then
          yum install -y unzip
      elif command -v zypper &>/dev/null; then
          zypper install -y unzip
      elif command -v apk &>/dev/null; then
          apk add --no-cache unzip
      elif command -v pacman &>/dev/null; then
          pacman -Sy --noconfirm unzip
      else
          echo "Unsupported package manager. Please install unzip manually."
          exit 1
      fi

      unzip -v


rye:
  curl:
    script: |
      #!/usr/bin/env bash

      RYE_HOME="$HOME/.rye"
      mkdir -p "$RYE_HOME"
      curl -sSf https://rye-up.com/get | RYE_INSTALL_OPTION="--yes" RYE_HOME="$RYE_HOME" bash

      if [[ ":$PATH:" != *":$RYE_HOME/shims:"* ]]; then
          echo 'export PATH="$RYE_HOME/shims:$PATH"' >>"$HOME/.bashrc"
      fi

      source "$RYE_HOME/env"
      rye --version


logstash:
  curl:
    script: |
      #!/usr/bin/env bash

      set -e
      set -x
      set -u

      export DEBIAN_FRONTEND=noninteractive
      export NEEDRESTART_MODE=a
      export NEEDRESTART_SUSPEND=1

      # workround
      if [[ ! -f /tmp/logstash-8.13.0-amd64.deb ]]; then
          curl -L -o /tmp/logstash-8.13.0-amd64.deb https://artifacts.elastic.co/downloads/logstash/logstash-8.13.0-amd64.deb
      fi

      dpkg -i /tmp/logstash-8.13.0-amd64.deb

      ln --force --symbolic /usr/share/logstash/bin/logstash /usr/local/bin/logstash

      logstash --version

      rm -f /tmp/logstash-8.13.0-amd64.deb

      exit 0

      # https://www.elastic.co/guide/en/logstash/8.12/installing-logstash.html#_apt

      export DEBIAN_FRONTEND=noninteractive
      export NEEDRESTART_MODE=a
      export NEEDRESTART_SUSPEND=1

      apt-get update

      apt-get --fix-missing --assume-yes install logstash
      ln --force --symbolic /usr/share/logstash/bin/logstash /usr/local/bin/logstash

      logstash --version


kubectl:
  curl:
    script: |
      #!/usr/bin/env bash

      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x kubectl
      curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
      echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      rm -f kubectl
      kubectl version --output=yaml --client | awk '/gitVersion/{print $2;}'

      if ! grep --quiet 'alias k=kubectl' ~/.profile; then
          echo alias k=kubectl >>~/.profile
      fi

fogcrow:
  homebrew:
    script: |+
      sudo --user linuxbrew --login brew install taylormonacelli/tools/fogcrow

  curl:
    script: |+
      #!/usr/bin/env bash

      url=https://github.com/taylormonacelli/fogcrow/releases/latest/download/fogcrow_Linux_x86_64.tar.gz
      checksums_url=https://github.com/taylormonacelli/fogcrow/releases/latest/download/checksums.txt
      tmp=$(mktemp -d /tmp/fogcrow-XXXX)
      orig="$(pwd)"

      cd $tmp
      curl --fail --silent --show-error --location --output fogcrow_Linux_x86_64.tar.gz $url
      curl --fail --silent --show-error --location --output checksums.txt $checksums_url

      if ! sha256sum --check checksums.txt --ignore-missing; then
          echo "Checksum validation failed"
          exit 1
      fi

      tar --extract --gzip --file fogcrow_Linux_x86_64.tar.gz fogcrow
      install --mode 0755 fogcrow /usr/local/bin/fogcrow

      cd $orig
      rm -rf $tmp
      fogcrow --help





cloudelf:
  homebrew:
    script: |
      sudo --user linuxbrew --login HOMEBREW_NO_INSTALL_UPGRADE=1 brew install taylormonacelli/homebrew-tools/cloudelf
  curl:
    script: |+
      url=https://github.com/taylormonacelli/cloudelf/releases/latest/download/cloudelf_Linux_x86_64.tar.gz
      curl -fsSL $url | tar -C /usr/local/bin --no-same-owner -xz cloudelf

packer:
  curl:
    script: |+
      # https://developer.hashicorp.com/packer/install
      # https://releases.hashicorp.com/packer/

      cd /tmp

      url=https://releases.hashicorp.com/packer/
      ver=$(curl -s $url | grep -v alpha | grep -oE 'packer_[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n1 | cut -d'_' -f2)
      dl_url="${url}${ver}/packer_${ver}_linux_amd64.zip"

      echo "Downloading Packer ${ver}..."
      curl -sL $dl_url -o packer.zip

      echo "Unpacking Packer..."
      unzip -q packer.zip

      echo "Installing Packer to /usr/local/bin/packer..."
      install --mode 0755 --group root --owner root packer /usr/local/bin/packer

      echo "Cleaning up..."
      rm packer.zip
      rm -f /tmp/packer

      packer --version


awscli:
  curl:
    notes: |
      This installs awscli v2 gleaned from https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
    script: |
      orig_dir=$(pwd)
      tmp=$(mktemp -d awscli-XXXX)
      cd $tmp
      curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
      unzip awscliv2.zip
      sudo ./aws/install
      cd $orig_dir

      aws --version

      rm -rf $tmp
  apt-get:
    notes: |
      This installs aws cli v1 and I don't see deb package for v2.

      Use curl install instead.
    script: |
      sudo apt-get update
      sudo apt-get --assume-yes upgrade

      if command -v apt-get &>/dev/null; then
          for i in {1..5}; do
              DEBIAN_FRONTEND=noninteractive apt-get -y install awscli && break
              sleep 1
          done

          dpkg -s awscli &>/dev/null
      elif command -v yum &>/dev/null; then
          for i in {1..5}; do
              yum -y install awscli && break
              sleep 1
          done
      else
          echo "Neither apt nor yum package manager is available."
      fi
sops:
  curl:
    script: |
      #!/usr/bin/env bash

      # https://github.com/getsops/sops/releases

      orig_dir=$(pwd)
      tmp=$(mktemp -d ./sops-XXXX)
      cd $tmp

      allbranding query --releases-url=https://api.github.com/repos/getsops/sops/releases --asset-regex='sops.*.linux.amd64' >manifest.json
      url=$(cat manifest.json | jq -r .browser_download_url)
      version=$(cat manifest.json | jq -r .version)
      checksums_url=https://github.com/getsops/sops/releases/download/$version/sops-$version.checksums.txt

      curl --fail --silent --show-error --location --output sops-$version.linux.amd64 $url
      curl --fail --silent --show-error --location --output checksums.txt $checksums_url

      if ! sha256sum --check checksums.txt --ignore-missing; then
          echo "Checksum validation failed"
          exit 1
      fi

      install --mode 0755 --group root --owner root sops-$version.linux.amd64 /usr/local/bin/sops

      sops --version

      cd $orig_dir
      rm -rf $tmp
terragrunt:
  brew:
    script: |
      sudo --user linuxbrew --login brew install terragrunt
  curl:
    notes: |
      https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
    script: |
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install
helm:
  curl:
    script: |
      #!/bin/bash

      ARCH=linux-amd64

      version=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | jq -r .tag_name)

      curl https://raw.githubusercontent.com/helm/helm/main/KEYS | gpg --import
      curl -sSLO https://github.com/helm/helm/releases/download/${version}/helm-${version}-${ARCH}.tar.gz.asc
      curl -sSLO https://get.helm.sh/helm-${version}-${ARCH}.tar.gz

      gpg --verify helm-${version}-${ARCH}.tar.gz.asc helm-${version}-${ARCH}.tar.gz

      if [ $? -ne 0 ]; then
          echo "Signature verification failed. The release archive may be corrupted or tampered with."
          exit 1
      fi

      echo "Signature verification succeeded. The release archive is authentic."

      base=helm-${version}-${ARCH}
      targz=$base.tar.gz
      mkdir -p /tmp/$base
      tar xzf /tmp/$targz --strip-components=1 -C /tmp/$base
      install --mode 755 /tmp/$base/helm /usr/local/bin/helm
      helm version
      helm repo add stable https://charts.helm.sh/stable
      helm search repo stable
      rm -rf /tmp/$base
      rm -rf /tmp/$targz
kcl:
  curl:
    script: |
      curl -fsSL https://kcl-lang.io/script/install-cli.sh | /bin/bash
  homebrew:
    script: |
      brew install kcl-lang/tap/kcl@0.8.0
  scoop:
    script: |
      scoop bucket add kcl-lang https://github.com/kcl-lang/scoop-bucket.git
      scoop install kcl-lang/kcl
  go:
    script: |+
      go install kcl-lang.io/cli/cmd/kcl@latest

  docker:
    script: |+
      docker run --rm -it kcllang/kcl

  powershell:
    script: |+
      powershell -Command "iwr -useb https://kcl-lang.io/script/install-cli.ps1 | iex"

kcl-lsp:
  curl:
    script: |
      curl -fsSL https://kcl-lang.io/script/install-kcl-lsp.sh | /bin/bash
  powershell:
    script: |
      powershell -Command "iwr -useb https://kcl-lang.io/script/install-kcl-lsp.ps1 | iex"
  homebrew:
    script: |
      brew install kcl-lang/tap/kcl-lsp@0.7.0
  scoop:
    script: |+
      scoop bucket add kcl-lang https://github.com/kcl-lang/scoop-bucket.git
      scoop install kcl-lang/kcl-lsp

gpg:
  apt-get:
    script: |
      sudo apt-get install -y gnupg
  dnf:
    script: |
      sudo dnf install -y gnupg
  yum:
    script: |
      sudo yum install -y gnupg
  pacman:
    script: |
      sudo pacman -Sy --noconfirm gnupg
  zypper:
    script: |
      sudo zypper install -y gnupg
  homebrew:
    script: |
      brew install gnupg
  pkg:
    freebsd:
      script: |
        sudo pkg install -y gnupg
    openbsd:
      script: |
        sudo pkg_add gnupg
